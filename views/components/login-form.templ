package components
import "errors"

type field struct {
	text      string
	Validator func(string) error
}

var LoginFields = map[string]field{
	"email": {
		text: "Email",
		Validator: func(value string) error {
			if value != "test@test.com" {
				return errors.New("Only test@test.com is valid.")
			}
			return nil
		},
	},
	"password": {
		text: "Password",
		Validator: func(value string) error {
			if value == "" {
				return errors.New("Required")
			}
			return nil
		},
	},
}


templ LoginForm() {
<div class="flex h-full flex-col justify-center px-6 py-12 lg:px-8 bg-slate-600">
  <div class="sm:mx-auto sm:w-full sm:max-w-sm">
    <img class="mx-auto h-10 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt="Login" />
    <h2 class="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-white">Sign in to your account</h2>
  </div>

  <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
    <form class="space-y-6" action="/login" method="POST">
	  @Inp(LoginFields["email"], "email", "", nil)
	  @Inp(LoginFields["password"], "password", "", nil)
      <div>
        <button
        id="loginButton"
        disabled
        class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm bg-slate-300"
        hx-get="/login"
        >Sign in</button>
      </div>
    </form>
  </div>
</div>
}

templ Inp(f field, name, value string, validation error) {
      <div hx-target="this" hx-swap="outerHTML">
      <div class="flex items-center justify-between">
        <label for={name} class="block text-sm font-medium leading-6 text-slate-200">{ f.text }</label>
        if name == "password" {
          <div class="text-sm">
            <a href="#" class="font-semibold text-slate-200 hover:text-indigo-500">Forgot password?</a>
          </div>
        }
      </div>
        <div class="mt-2">
          <input
          hx-post={ "/login/validate/"+name }
          name={name}
          value={value}
          type={name}
          autocomplete={name}
          required
          class="block w-full rounded-md border-0 py-1.5 pl-3 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
        </div>
        if validation != nil {
            <p class="text-red-600">{ validation.Error() }</p>
        }
      </div>
}

templ LoginButton() {
      <div>
        <button
        id="loginButton"
        disabled
        type="submit"
        class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        hx-post="/login"
        hx-target="#mainPage">Sign in</button>
      </div>
}

