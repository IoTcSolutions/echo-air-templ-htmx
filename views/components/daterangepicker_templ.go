// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func DateRangePicker() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n        value: [&#39;02/01/2022&#39;, &#39;02/05/2022&#39;],\n        init() {\n            $(this.$refs.picker).daterangepicker({\n                startDate: this.value[0],\n                endDate: this.value[1],\n                ranges: {\n                    &#39;Today&#39;: [moment(), moment()],\n                    &#39;Yesterday&#39;: [moment().subtract(1, &#39;days&#39;), moment().subtract(1, &#39;days&#39;)],\n                    &#39;Last 7 Days&#39;: [moment().subtract(6, &#39;days&#39;), moment()],\n                    &#39;Last 30 Days&#39;: [moment().subtract(29, &#39;days&#39;), moment()],\n                    &#39;This Month&#39;: [moment().startOf(&#39;month&#39;), moment().endOf(&#39;month&#39;)],\n                    &#39;Last Month&#39;: [moment().subtract(1, &#39;month&#39;).startOf(&#39;month&#39;), moment().subtract(1, &#39;month&#39;).endOf(&#39;month&#39;)]\n                },\n            }, (start, end) =&gt; {\n                this.value[0] = start.format(&#39;MM/DD/YYYY&#39;)\n                this.value[1] = end.format(&#39;MM/DD/YYYY&#39;)\n            })\n\n            this.$watch(&#39;value&#39;, () =&gt; {\n                $(this.$refs.picker).data(&#39;daterangepicker&#39;).setStartDate(this.value[0])\n                $(this.$refs.picker).data(&#39;daterangepicker&#39;).setEndDate(this.value[1])\n            })\n        },\n    }\" class=\"max-w-sm w-full\"><div class=\"mb-2 font-bold\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := `Date Range:`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div class=\"relative\"><div class=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"></path></svg></div><input type=\"text\" x-ref=\"picker\" class=\"w-full rounded-md border border-gray-200 py-2.5 pl-12 pr-3\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
